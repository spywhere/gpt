#!/bin/bash

cmd_name="$(basename "$0")"
debug=0

esc_reset="" # reset
esc_blue="" # indicate process
esc_green="" # indicate options and information
esc_yellow="" # indicate warnings
esc_red="" # indicate errors

if test -n "$CLIGPT_FORCE_COLOR" || (test -t 1 && test -n "$TERM" -a -n "$(command -v tput)" && test "$(tput colors)" -ge 8 && test -n "$(command -v tty)"); then
  if test -n "$(command -v wc)"; then
    inline_support=1
  fi
  esc_reset="$(tput sgr0)"
  if test "$(tput colors)" -gt 8; then
    esc_blue="$(tput setaf 12)"
    esc_green="$(tput setaf 10)"
    esc_yellow="$(tput setaf 11)"
    esc_red="$(tput setaf 9)"
  else
    esc_blue="$(tput setaf 4)"
    esc_green="$(tput setaf 2)"
    esc_yellow="$(tput setaf 3)"
    esc_red="$(tput setaf 1)"
  fi
fi

if test -z "$CLIGPT_CONTEXT_STORAGE"; then
  CLIGPT_CONTEXT_STORAGE="."
fi
if test -z "$CLIGPT_TIMEOUT"; then
  timeout=30
fi
if test -z "$CLIGPT_TEMP"; then
  temp=""
fi
if test -z "$CLIGPT_TOKEN"; then
  token=""
fi
if test -z "$CLIGPT_MODEL"; then
  model="gpt-4o"
fi
context=""

if test -z "$OPENAI_API_BASE"; then
  OPENAI_API_BASE="https://api.openai.com/v1"
fi

fallback_default() {
  if test -z "$1"; then
    printf 'OpenAI spec'
  else
    printf '%s' "$1"
  fi
}

usage() {
  echo "USAGE"
  echo "  $cmd_name [flags] [--] <prompt>..."
  echo "  cat <filename> | $cmd_name [flags] [--] [prompt]..."
  echo
  echo "ENVIRONMENT VARIABLES"
  echo "  OPENAI_API_BASE                  Host for OpenAI API (default to $(fallback_default "$OPENAI_API_BASE"))"
  echo "  OPENAI_API_KEY                   API key for the given OpenAI base"
  echo
  echo "  CLIGPT_TEMP                      Sampling temperature, see the -T, --temperature flag below"
  echo "  CLIGPT_TOKEN                     Maximum number of tokens to generate in the completion, see the -t, --max-tokens flag below"
  echo "  CLIGPT_MODEL                     ID of the model to use, see the -m, --model flag below"
  echo "  CLIGPT_TIMEOUT                   Maximum number of seconds before request timed out, see the --timeout flag below"
  echo "  CLIGPT_FORCE_COLOR               Maximum number of seconds before request timed out, see the --timeout flag below"
  echo "  CLIGPT_CONTEXT_STORAGE           Directory to store/load the context file (default to current directory)"
  echo
  echo "FLAGS"
  echo "  -h, --help                       Show this message"
  echo "  -T, --temperature=<temp>         Sampling temperature, higher is more random (default to $(fallback_default "$temp"))"
  echo "  -t, --max-tokens=<number>        Maximum number of tokens to generate in the completion (default to $(fallback_default "$token"))"
  echo "  -m, --model=<name>               ID of the model to use (default to $(fallback_default "$model"))"
  echo "  -c, --context, --context=<file>  Use chat context (default to false), optionally use and store the context in the given file. The prompt from command line will be passed as a system message to the assistant, cannot be used in a pipe"
  echo "  --timeout=<number>               Maximum number of seconds before request timed out (default to "$(fallback_default "$timeout")")"
  echo "  --models                         List all available models"
  echo "  --uuid                           A unique ID for verifying the tool"
  echo "  --debug                          Print request and response on to standard error"
  echo "  --debug-dry                      Print request to standard error, but do not make a request"
  echo
  echo "PROMPT HELPER -- cannot used with context"
  echo "  --cmd, --command                 Produce only shell command output"
  echo "  --code                           Produce only one-liner code"
  echo "  --url                            Produce only URL for the given query"
  echo
  echo "CONTEXT LOADER"
  echo "  --fzf                            Fuzzy search for the context file in context storage (see CLIGPT_CONTEXT_STORAGE above) using fzf (fzf is required)"

  if test "$cmd_name" != "prepare-commit-msg"; then
    echo
    echo "ADDITIONAL USAGE"
    echo "  Symlink (or copy) this script as your 'prepare-commit-msg' hook on your git repository to have GPT suggested a commit message"
    echo "    ln -fs $0 /path/to/repo/.git/hooks/prepare-commit-msg"
    echo
    echo "  Add the following line to your .zshrc to enable GPT command lookup using '# <query>'"
    echo "    . <($cmd_name --zsh)"
  fi
}

prompt_prefix() {
  local prompt
  case "$1" in
    copilot)
      prompt='a structured and complete explanations of shell commands. We follow the commands piece-by-piece in bullet-point form, with multiple statements being separate bullets. Sub-commands form sub-bullets. All flags are explained as sub-bullets.'
      ;;
    command)
      prompt='a one-liner posix shell command with no prompt or explanation. Only produce the shell command in plain text with no escape or syntax settings and nothing else, the command will use for execution as-is.'
      ;;
    code)
      prompt='a one-liner code with no prompt or explanation. Only produce the code in plain text with no escape or syntax settings and nothing else, the code will use for execution as-is.'
      ;;
    url)
      prompt='an URL regarding on the topic given. Only produce the URL in plain text with no escape or syntax settings and nothing else, the URL will be open in the browser directly.'
      ;;
  esac

  printf 'Given the user request, only produce %s' "$prompt"
}

copilot_examples() {
  local prompts="$*"
  local result

  local command='find -name "*.ts" | grep -v node_modules'
  prompts="$(additem "$prompts" "$(printf '{"role":"user","content":%s}' "$(tojson "$command")")")"
  # shellcheck disable=SC2016
  result="$(printf -- '--- Command ---\n\n%s\n\n--- Explanation ---\n\n- %s\n  - %s\n- %s\n  - %s' "$command" '`find` is used to list files.' '`-name "*.ts"` stipulates that we search for files ending in `.ts`.' '`| grep` means we pass that list of files to `grep` which filters the list.' '`-v node_modules` means we exclude all files containing node_modules in its path.')"
  prompts="$(additem "$prompts" "$(printf '{"role":"assistant","content":%s}' "$(tojson "$result")")")"

  # shellcheck disable=SC2016
  command="$(printf '%s\n  %s\n  %s\n%s' 'for file in $(find -name "*.py"); do' 'echo "$file";' 'wc -l $file;' 'done')"
  prompts="$(additem "$prompts" "$(printf '{"role":"user","content":%s}' "$(tojson "$command")")")"
  # shellcheck disable=SC2016
  result="$(printf -- '--- Command ---\n\n%s\n\n--- Explanation ---\n\n- %s\n  - %s\n    - %s\n- %s\n  - %s\n  - %s\n    - %s' "$command" 'The for loop iterates over a list of items and executes its body for each, using the loop variable `$file`.' 'The list of items is the output of a sub-call to `find` which is used to list files.' '`-name "*.py"` stipulates that we search for files ending in `.py`.' 'The loop body executes two commands for each file:' '`echo "$file"` will print the name of the current file to the terminal.' '`wc` is used to count the number of lines in the current file.' '`-l` specifies that we only want the line count, not the word or character count.')"
  prompts="$(additem "$prompts" "$(printf '{"role":"assistant","content":%s}' "$(tojson "$result")")")"

  printf '%s' "$prompts"
}

additional_prompts() {
  case "$1" in
    copilot)
      copilot_examples "$2"
      ;;
    *)
      printf '%s' "$2"
  esac
}

handle_gpt_response() {
  local response="$1"
  local errmsg
  errmsg="$(printf '%s' "$response" | jq -er '.error.message')"
  if test "$?" -eq 0; then
    printf 'ERROR: [%s] %s\n' "$(printf '%s' "$response" | jq -r '.error.type')" "$errmsg" >&2
    return 1
  fi
  return 0
}

openai() {
  local path="$1"
  local body="$2"
  local filter="$3"
  local method="POST"
  if test -z "$3"; then
    body=""
    filter="$2"
    method="GET"
  elif test "$debug" -ge 1; then
    printf 'Req[%s]: %s\n' "$path" "$body" >&2
  fi
  if test "$debug" -eq 2; then
    return 4
  fi
  local response
  response="$(curl -m "$timeout" -X "$method" -d "$body" -sSL "$OPENAI_API_BASE/$path" -H 'Content-Type: application/json' -H "Authorization: Bearer $OPENAI_API_KEY" 2>/dev/null)"
  if test $? -ne 0; then
    return 1
  fi

  if test "$debug" -ge 1; then
    printf 'Res[%s]: %s\n' "$path" "$response" >&2
  fi

  printf '%s' "$response" | jq '.' >/dev/null 2>&1
  if test $? -ne 0; then
    return 2
  fi

  if ! handle_gpt_response "$response"; then
    return 3
  fi

  printf '%s' "$response" | jq -r "$filter"
}

handle_status() {
  local status="$1"
  case "$status" in
    0)
      ;;
    1)
      echo "ERROR: Request timed out" >&2
      ;;
    2)
      echo "ERROR: Bad response" >&2
      ;;
    3|4)
      ;;
    *)
      echo "ERROR: Request failed" >&2
      ;;
  esac
  return "$status"
}

tojson() {
  printf '%s' "$*" | jq -sRr 'tojson'
}

setitem() {
  printf '{"o":%s,"k":%s,"v":%s}' "$1" "$(tojson "$2")" "$3" | jq -rc '.o[.k] = .v | .o'
}

additem() {
  printf '{"o":%s,"i":%s}' "$1" "$2" | jq -rc '.o + [.i]'
}

models() {
  echo "Available models:"
  openai models '.data[] | "  - \(.id)\n      by: \(.owned_by)"'
  if ! handle_status "$?"; then
    exit 1
  fi
}

parse() {
  context="$1"
  if ! test -f "$context"; then
    echo "ERROR: a given context '$context' is not found" >&2
    return 1
  fi

  prompts="$(jq -c . "$context" 2>/dev/null)"
  if test $? -ne 0; then
    echo "ERROR: a given context '$context' is not in a correct structure" >&2
    return 1
  fi
  jq -r '.[] | "\({"system": "\($blue)[System]\($reset)", "user": "\($green)[User]\($reset)", "assistant": "\($yellow)[Assistant]\($reset)"}[.role] // "[\(.role  / "" | .[:1] |= map(ascii_upcase) | add)]") \(.content)"' --arg reset "$esc_reset" --arg blue "$esc_blue" --arg green "$esc_green" --arg yellow "$esc_yellow" "$context"
}

main() {
  local use_stdin=1
  if tty -s >/dev/null 2>&1; then
    use_stdin=0
  fi
  local kind=""
  while test "$1" != ""; do
    local param
    param="$(printf "%s" "$1" | sed 's/=.*//g')"
    local value
    value="$(printf "%s" "$1" | sed 's/^[^=]*=//g')"
    local equal_sign
    equal_sign="$(printf "%s" "$1" | sed 's/[^=]//g')"
    case "$param" in
      -h | --help)
        usage
        return
        ;;
      --zsh)
        setup_zsh
        return
        ;;
      --models)
        models
        return
        ;;
      --uuid)
        echo "4210bbbd-7376-4c55-ac3a-093552be821c"
        return
        ;;
      --fzf)
        if ! test -n "$(command -v fzf)"; then
          echo "ERROR: fzf is required" >&2
          return 1
        fi
        if test -z "$CLIGPT_CONTEXT_STORAGE"; then
          echo "ERROR: GPT_CONTEXT_STORAGE is not yet setup" >&2
          return 1
        elif ! test -d "$CLIGPT_CONTEXT_STORAGE"; then
          echo "ERROR: no context found on \"$CLIGPT_CONTEXT_STORAGE\" (perhaps storage is empty?)" >&2
          return 1
        fi
        shift
        output="$(find "$CLIGPT_CONTEXT_STORAGE" -maxdepth 1 -type f | rev | cut -d'/' -f1 | rev | fzf "--preview=GPT_FORCE_COLOR=1 $0 --parse={}" '--bind=ctrl-/:toggle-preview,ctrl-d:preview-half-page-down,ctrl-u:preview-half-page-up' '--preview-label=Chat History' '--preview-window=down:70%:wrap')"
        if test -z "$output"; then
          return 1
        fi
        context="$CLIGPT_CONTEXT_STORAGE/$output"
        ;;
      --timeout)
        if test -z "$equal_sign"; then
          echo "ERROR: a number of seconds is required (perhaps missing an equal sign?)" >&2
          return 1
        fi
        timeout="$value"
        ;;
      -T | --temperature)
        if test -z "$equal_sign"; then
          echo "ERROR: a temperature is required (perhaps missing an equal sign?)" >&2
          return 1
        fi
        temp="$value"
        ;;
      -t | --max-tokens)
        if test -z "$equal_sign"; then
          echo "ERROR: a number of tokens is required (perhaps missing an equal sign?)" >&2
          return 1
        fi
        token="$value"
        ;;
      -m | --model)
        if test -z "$equal_sign"; then
          echo "ERROR: a model ID is required (perhaps missing an equal sign?)" >&2
          return 1
        fi
        model="$value"
        ;;
      -c | --context)
        if test -z "$equal_sign"; then
          context='-'
        else
          context="$value"
        fi
        ;;
      --parse)
        if test -z "$equal_sign"; then
          echo "ERROR: a context is required (perhaps missing an equal sign?)" >&2
          return 1
        else
          parse "$value"
          return $?
        fi
        ;;
      --copilot)
        kind="copilot"
        ;;
      --cmd | --command)
        kind="command"
        ;;
      --code)
        kind="code"
        ;;
      --url)
        kind="url"
        ;;
      --debug)
        debug=1
        ;;
      --debug-dry)
        debug=2
        ;;
      --)
        shift
        break
        ;;
      -*)
        echo "ERROR: unknown flag \"$1\"" >&2
        return 1
        ;;
      *)
        break
        ;;
    esac

    shift
  done

  if test -z "$OPENAI_API_KEY"; then
    echo "ERROR: OPENAI_API_KEY is required" >&2
    return 1
  fi

  local prompt=""
  if test "$use_stdin" -eq 1; then
    if test -n "$context"; then
      echo "ERROR: context cannot be used in the pipe" >&2
      return 1
    fi
    if test -n "$*"; then
      prompt="$(printf '%s:\n%s' "$*" "$(cat -)")"
    else
      prompt="$(cat -)"
    fi
  else
    prompt="$*"
  fi
  if test -z "$context" && test -z "$prompt"; then
    echo "No prompt given" >&2
    echo "Use --help for usage" >&2
    return
  fi

  local body="{}"

  if test -n "$model"; then
    body="$(setitem "$body" "model" "$(tojson "$model")")"
  fi
  if test -n "$token"; then
    body="$(setitem "$body" "max_tokens" "$token")"
  fi
  if test -n "$temp"; then
    body="$(setitem "$body" "temperature" "$temp")"
  fi

  local prompts="[]"
  if test -n "$context"; then
    if test "$context" != '-'; then
      printf -- "==== Context will be stored in '%s' ====\n" "$context"
    fi
    if test "$context" != '-' && test -f "$context"; then
      parse "$context"
      if test $? -ne 0; then
        return 1
      fi
    elif test -n "$prompt"; then
      printf '%s[System]%s %s\n' "$esc_blue" "$esc_reset" "$prompt"
      prompts="$(additem "$prompts" "$(printf '{"role":"system","content":%s}' "$(tojson "$prompt")")")"
    fi
  fi

  while true; do
    if test -n "$context"; then
      printf '%s[User]%s ' "$esc_green" "$esc_reset"
      if read -r line && test -n "$line"; then
        prompts="$(additem "$prompts" "$(printf '{"role":"user","content":%s}' "$(tojson "$line")")")"
      else
        break
      fi
    else
      if test -n "$kind"; then
        prompts="$(additem "$prompts" "$(printf '{"role":"system","content":%s}' "$(tojson "$(prompt_prefix "$kind")")")")"
        prompts="$(additional_prompts "$kind" "$prompts")"
      fi
      prompts="$(additem "$prompts" "$(printf '{"role":"user","content":%s}' "$(tojson "$prompt")")")"
    fi

    body="$(setitem "$body" "messages" "$prompts")"
    response="$(openai chat/completions "$body" '.')"
    if ! handle_status "$?"; then
      return 1
    fi
    content="$(printf '%s' "$response" | jq -r '.choices[] | .message.content')"
    prompts="$(additem "$prompts" "$(printf '{"role":"assistant","content":%s}' "$(tojson "$content")")")"
    if test -n "$context"; then
      printf '%s[Assistant]%s %s\n' "$esc_yellow" "$esc_reset" "$content"
    else
      printf '%s\n' "$content"
    fi

    if test -z "$context"; then
      break
    elif test "$context" != '-'; then
      if test -d "$CLIGPT_CONTEXT_STORAGE"; then
        printf '%s' "$prompts" > "$CLIGPT_CONTEXT_STORAGE/$context"
      else
        printf '%s' "$prompts" > "$context"
      fi
    fi
  done
}

hook() {
  COMMIT_MSG_FILE="$1"
  COMMIT_SOURCE="$2"

  if test -n "$COMMIT_SOURCE"; then
    exit 0
  fi
  if test -z "$GPT_COMMIT_PROMPT"; then
    GPT_COMMIT_PROMPT="Write a one-line commit message in plain text (not a markdown) not exceeding 79 characters. The following is the last 5 commit messages from the project along with the changes itself, stick to the pattern of the project:"
  fi

  GIT_COMMITS="$(git log -5 --pretty=format:'%s' --no-merges)"
  GIT_CHANGES="$(git diff --staged)"

  if test "$GIT_CHANGES" = ""; then
      printf 'No changes to commit.\n'
      exit 0
  fi

  printf 'Generating commit message...\n'

  GPT_MSG="$(printf '%s\n\n%s\n\n%s' "$GPT_COMMIT_PROMPT" "$GIT_COMMITS" "$GIT_CHANGES" | main)"
  if test $? -ne 0; then
      printf '%s\n' "$GPT_MSG"
      exit $?
  fi
  COMMIT_MSG="$(cat "$COMMIT_MSG_FILE")"

  printf '# %s\n%s' "$GPT_MSG" "$COMMIT_MSG" > "$COMMIT_MSG_FILE"
}

setup_zsh() {
  cat <<'EOF'
gpt_prompt() {
  if [[ "$1" = "#"* ]]; then
    INPUT="${1#"#"}"
    printf "Asking GenAI for command...\r"
EOF
  printf "    print -z \"\$(%s --cmd \"\$INPUT\")\"\n" "$cmd_name"
  cat <<'EOF'
    return
  fi
}

gpt_prompt_handler() {
  if [[ "$1" = "#"* ]]; then
    return
  elif test -n "${functions[gpt_prompt_fallback]}"; then
    gpt_prompt_fallback "$*"
  else
    echo "zsh: command not found: $1"
  fi
}

if test -n "${functions[command_not_found_handler]}"; then
  functions[gpt_prompt_fallback]="${functions[command_not_found_handler]}"
fi
command_not_found_handler() {
  gpt_prompt_handler "$*"
}

preexec_functions+=gpt_prompt
EOF
}

case "$cmd_name" in
  prepare-commit-msg)
    hook "$@"
    ;;
  *)
    main "$@"
    ;;
esac
